// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/
(function(root) {
  "use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Enter: peg$parseEnter };
  var peg$startRuleFunction = peg$parseEnter;

  var peg$c0 = ".";
  var peg$c1 = "and";
  var peg$c2 = "per";
  var peg$c3 = "party";
  var peg$c4 = "parted";
  var peg$c5 = "quarterly";
  var peg$c6 = "on";
  var peg$c7 = "between";
  var peg$c8 = "s";
  var peg$c9 = "a";
  var peg$c10 = "an";
  var peg$c11 = "two";
  var peg$c12 = "three";
  var peg$c13 = "four";
  var peg$c14 = "five";
  var peg$c15 = "six";
  var peg$c16 = "seven";
  var peg$c17 = "eight";
  var peg$c18 = "nine";
  var peg$c19 = "ten";
  var peg$c20 = "eleven";
  var peg$c21 = "twelve";
  var peg$c22 = "pale";
  var peg$c23 = "fess";
  var peg$c24 = "bend";
  var peg$c25 = "chevron";
  var peg$c26 = "saltire";
  var peg$c27 = "in";
  var peg$c28 = "first";
  var peg$c29 = "1st";
  var peg$c30 = "second";
  var peg$c31 = "2nd";
  var peg$c32 = "third";
  var peg$c33 = "3rd";
  var peg$c34 = "fourth";
  var peg$c35 = "4th";
  var peg$c36 = "palewise";
  var peg$c37 = "fesswise";
  var peg$c38 = "bendwise";
  var peg$c39 = "saltirewise";
  var peg$c40 = "azure";
  var peg$c41 = "or";
  var peg$c42 = "argent";
  var peg$c43 = "gules";
  var peg$c44 = "vert";
  var peg$c45 = "sable";
  var peg$c46 = "purpure";
  var peg$c47 = "counterchanged";
  var peg$c48 = "cross";
  var peg$c49 = "chief";
  var peg$c50 = "sword";
  var peg$c51 = "rondel";
  var peg$c52 = "mullet";
  var peg$c53 = "of";
  var peg$c54 = "barry bendy";
  var peg$c55 = "barry";
  var peg$c56 = "bendy";
  var peg$c57 = "checky";
  var peg$c58 = "chequey";
  var peg$c59 = "chevronny";
  var peg$c60 = "lozengy";
  var peg$c61 = "paly";

  var peg$r0 = /^[,; \t\n\r]/;

  var peg$e0 = peg$literalExpectation(".", false);
  var peg$e1 = peg$literalExpectation("and", false);
  var peg$e2 = peg$literalExpectation("per", false);
  var peg$e3 = peg$literalExpectation("party", false);
  var peg$e4 = peg$literalExpectation("parted", false);
  var peg$e5 = peg$literalExpectation("quarterly", false);
  var peg$e6 = peg$literalExpectation("on", false);
  var peg$e7 = peg$literalExpectation("between", false);
  var peg$e8 = peg$literalExpectation("s", false);
  var peg$e9 = peg$otherExpectation("a/an");
  var peg$e10 = peg$literalExpectation("a", false);
  var peg$e11 = peg$literalExpectation("an", false);
  var peg$e12 = peg$otherExpectation("plural quantity");
  var peg$e13 = peg$literalExpectation("two", false);
  var peg$e14 = peg$literalExpectation("three", false);
  var peg$e15 = peg$literalExpectation("four", false);
  var peg$e16 = peg$literalExpectation("five", false);
  var peg$e17 = peg$literalExpectation("six", false);
  var peg$e18 = peg$literalExpectation("seven", false);
  var peg$e19 = peg$literalExpectation("eight", false);
  var peg$e20 = peg$literalExpectation("nine", false);
  var peg$e21 = peg$literalExpectation("ten", false);
  var peg$e22 = peg$literalExpectation("eleven", false);
  var peg$e23 = peg$literalExpectation("twelve", false);
  var peg$e24 = peg$otherExpectation("direction");
  var peg$e25 = peg$literalExpectation("pale", false);
  var peg$e26 = peg$literalExpectation("fess", false);
  var peg$e27 = peg$literalExpectation("bend", false);
  var peg$e28 = peg$literalExpectation("chevron", false);
  var peg$e29 = peg$literalExpectation("saltire", false);
  var peg$e30 = peg$literalExpectation("in", false);
  var peg$e31 = peg$otherExpectation("quarter name");
  var peg$e32 = peg$literalExpectation("first", false);
  var peg$e33 = peg$literalExpectation("1st", false);
  var peg$e34 = peg$literalExpectation("second", false);
  var peg$e35 = peg$literalExpectation("2nd", false);
  var peg$e36 = peg$literalExpectation("third", false);
  var peg$e37 = peg$literalExpectation("3rd", false);
  var peg$e38 = peg$literalExpectation("fourth", false);
  var peg$e39 = peg$literalExpectation("4th", false);
  var peg$e40 = peg$otherExpectation("posture");
  var peg$e41 = peg$literalExpectation("palewise", false);
  var peg$e42 = peg$literalExpectation("fesswise", false);
  var peg$e43 = peg$literalExpectation("bendwise", false);
  var peg$e44 = peg$literalExpectation("saltirewise", false);
  var peg$e45 = peg$otherExpectation("tincture");
  var peg$e46 = peg$literalExpectation("azure", false);
  var peg$e47 = peg$literalExpectation("or", false);
  var peg$e48 = peg$literalExpectation("argent", false);
  var peg$e49 = peg$literalExpectation("gules", false);
  var peg$e50 = peg$literalExpectation("vert", false);
  var peg$e51 = peg$literalExpectation("sable", false);
  var peg$e52 = peg$literalExpectation("purpure", false);
  var peg$e53 = peg$literalExpectation("counterchanged", false);
  var peg$e54 = peg$otherExpectation("ordinary name");
  var peg$e55 = peg$literalExpectation("cross", false);
  var peg$e56 = peg$literalExpectation("chief", false);
  var peg$e57 = peg$otherExpectation("charge name");
  var peg$e58 = peg$literalExpectation("sword", false);
  var peg$e59 = peg$literalExpectation("rondel", false);
  var peg$e60 = peg$literalExpectation("mullet", false);
  var peg$e61 = peg$otherExpectation("varied");
  var peg$e62 = peg$literalExpectation("of", false);
  var peg$e63 = peg$otherExpectation("varied name");
  var peg$e64 = peg$literalExpectation("barry bendy", false);
  var peg$e65 = peg$literalExpectation("barry", false);
  var peg$e66 = peg$literalExpectation("bendy", false);
  var peg$e67 = peg$literalExpectation("checky", false);
  var peg$e68 = peg$literalExpectation("chequey", false);
  var peg$e69 = peg$literalExpectation("chevronny", false);
  var peg$e70 = peg$literalExpectation("lozengy", false);
  var peg$e71 = peg$literalExpectation("paly", false);
  var peg$e72 = peg$otherExpectation("whitespace");
  var peg$e73 = peg$classExpectation([",", ";", " ", "\t", "\n", "\r"], false, false);

  var peg$f0 = function(content) { return content };
  var peg$f1 = function(tincture, content) { return { tincture, content } };
  var peg$f2 = function(varied, first, second, content) { return { varied, first, second, content } };
  var peg$f3 = function(direction, first, second, content) { return { direction, first, second, content } };
  var peg$f4 = function(quarters) { return { quarters } };
  var peg$f5 = function(ordinary, charge) { return { on: true, ordinary, charge } };
  var peg$f6 = function(ordinary, surround, charge) { return { on: true, ordinary, surround, charge } };
  var peg$f7 = function(quarter, content) { return { quarters: [quarter], content } };
  var peg$f8 = function(quarter1, quarter2, content) { return { quarters: [quarter1, quarter2], content  } };
  var peg$f9 = function(quarter1, quarter2, quarter3, content) { return { quarters: [quarter1, quarter2, quarter3], content  } };
  var peg$f10 = function(quarter1, quarter2, quarter3, quarter4, content) { return { quarters: [quarter1, quarter2, quarter3, quarter4], content  } };
  var peg$f11 = function(ordinary, tincture) { return { ordinary, tincture } };
  var peg$f12 = function(charge, posture, tincture) { return { charge, tincture, posture, count: 1 } };
  var peg$f13 = function(count, charge, posture, tincture, direction) { return { charge, tincture, posture, count, direction } };
  var peg$f14 = function() { return 2 };
  var peg$f15 = function() { return 3 };
  var peg$f16 = function() { return 4 };
  var peg$f17 = function() { return 5 };
  var peg$f18 = function() { return 6 };
  var peg$f19 = function() { return 7 };
  var peg$f20 = function() { return 8 };
  var peg$f21 = function() { return 9 };
  var peg$f22 = function() { return 10 };
  var peg$f23 = function() { return 11 };
  var peg$f24 = function() { return 12 };
  var peg$f25 = function(direction) { return direction };
  var peg$f26 = function() { return 1 };
  var peg$f27 = function() { return 1 };
  var peg$f28 = function() { return 2 };
  var peg$f29 = function() { return 2 };
  var peg$f30 = function() { return 3 };
  var peg$f31 = function() { return 3 };
  var peg$f32 = function() { return 4 };
  var peg$f33 = function() { return 4 };
  var peg$f34 = function(type, count) { return { type, count } };
  var peg$f35 = function(type) { return { type } };
  var peg$f36 = function() { return "checky" };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseEnter() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseComplexContent();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f0(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComplexContent() {
    var s0;

    s0 = peg$parseSimpleField();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePartyPerField();
      if (s0 === peg$FAILED) {
        s0 = peg$parseQuarterly();
      }
    }

    return s0;
  }

  function peg$parseSimpleField() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseTincture();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseSimpleContent();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f1(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseVaried();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseTincture();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.substr(peg$currPos, 3) === peg$c1) {
            s5 = peg$c1;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseTincture();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseSimpleContent();
              if (s9 === peg$FAILED) {
                s9 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f2(s1, s3, s7, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsePartyPerField() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parseParty();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c2) {
      s3 = peg$c2;
      peg$currPos += 3;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = peg$parseDirection();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseTincture();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          if (input.substr(peg$currPos, 3) === peg$c1) {
            s9 = peg$c1;
            peg$currPos += 3;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parseTincture();
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = peg$parseSimpleContent();
              if (s13 === peg$FAILED) {
                s13 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f3(s5, s7, s11, s13);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParty() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c3) {
      s0 = peg$c3;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c4) {
        s0 = peg$c4;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
    }

    return s0;
  }

  function peg$parseQuarterly() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parseQuarter();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseQuarter();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f4(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSimpleContent() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$parseOrdinary();
    if (s0 === peg$FAILED) {
      s0 = peg$parseCharge();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c6) {
          s1 = peg$c6;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseOrdinary();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseCharge();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f5(s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c6) {
            s1 = peg$c6;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseOrdinary();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (input.substr(peg$currPos, 7) === peg$c7) {
                s5 = peg$c7;
                peg$currPos += 7;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parsePluralCharge();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  s9 = peg$parseCharge();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f6(s3, s7, s9);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseQuarter() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseQuarterName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseComplexContent();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f7(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseQuarterName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.substr(peg$currPos, 3) === peg$c1) {
          s3 = peg$c1;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parse_();
        s5 = peg$parseQuarterName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseComplexContent();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f8(s1, s5, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseQuarterName();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseQuarterName();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.substr(peg$currPos, 3) === peg$c1) {
              s5 = peg$c1;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parse_();
            s7 = peg$parseQuarterName();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseComplexContent();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f9(s1, s3, s7, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseQuarterName();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseQuarterName();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseQuarterName();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (input.substr(peg$currPos, 3) === peg$c1) {
                  s7 = peg$c1;
                  peg$currPos += 3;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e1); }
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                s8 = peg$parse_();
                s9 = peg$parseQuarterName();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  s11 = peg$parseComplexContent();
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f10(s1, s3, s5, s9, s11);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseOrdinary() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSingular();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseOrdinaryName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseTincture();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f11(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCharge() {
    var s0;

    s0 = peg$parseSingularCharge();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePluralCharge();
    }

    return s0;
  }

  function peg$parseSingularCharge() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseSingular();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseChargeName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePosture();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$parseTincture();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f12(s3, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePluralCharge() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parsePlural();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseChargeName();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 115) {
          s4 = peg$c8;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parsePosture();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parse_();
          s8 = peg$parseTincture();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseInDirection();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f13(s1, s3, s6, s8, s10);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSingular() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 97) {
      s0 = peg$c9;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c10) {
        s0 = peg$c10;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    return s0;
  }

  function peg$parsePlural() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c12) {
        s1 = peg$c12;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f15();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c13) {
          s1 = peg$c13;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f16();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c14) {
            s1 = peg$c14;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e16); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f17();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c15) {
              s1 = peg$c15;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e17); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f18();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c16) {
                s1 = peg$c16;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e18); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f19();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c17) {
                  s1 = peg$c17;
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e19); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f20();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 4) === peg$c18) {
                    s1 = peg$c18;
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e20); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f21();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c19) {
                      s1 = peg$c19;
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e21); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f22();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 6) === peg$c20) {
                        s1 = peg$c20;
                        peg$currPos += 6;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e22); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f23();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 6) === peg$c21) {
                          s1 = peg$c21;
                          peg$currPos += 6;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e23); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$f24();
                        }
                        s0 = s1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

    return s0;
  }

  function peg$parseDirection() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 4) === peg$c22) {
      s0 = peg$c22;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c23) {
        s0 = peg$c23;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c24) {
          s0 = peg$c24;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c25) {
            s0 = peg$c25;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e28); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c26) {
              s0 = peg$c26;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e29); }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseInDirection() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c27) {
      s1 = peg$c27;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseDirection();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f25(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseQuarterName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c28) {
      s1 = peg$c28;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f26();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c29) {
        s1 = peg$c29;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f27();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c30) {
          s1 = peg$c30;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f28();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c31) {
            s1 = peg$c31;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f29();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c32) {
              s1 = peg$c32;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e36); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f30();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c33) {
                s1 = peg$c33;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e37); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f31();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c34) {
                  s1 = peg$c34;
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e38); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f32();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c35) {
                    s1 = peg$c35;
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e39); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f33();
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parsePosture() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 8) === peg$c36) {
      s0 = peg$c36;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c37) {
        s0 = peg$c37;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c38) {
          s0 = peg$c38;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c39) {
            s0 = peg$c39;
            peg$currPos += 11;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e44); }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }

  function peg$parseTincture() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 5) === peg$c40) {
      s0 = peg$c40;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c41) {
        s0 = peg$c41;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c42) {
          s0 = peg$c42;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e48); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c43) {
            s0 = peg$c43;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e49); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c44) {
              s0 = peg$c44;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e50); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c45) {
                s0 = peg$c45;
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e51); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c46) {
                  s0 = peg$c46;
                  peg$currPos += 7;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e52); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 14) === peg$c47) {
                    s0 = peg$c47;
                    peg$currPos += 14;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e53); }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

    return s0;
  }

  function peg$parseOrdinaryName() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 4) === peg$c24) {
      s0 = peg$c24;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c23) {
        s0 = peg$c23;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c48) {
          s0 = peg$c48;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e55); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c25) {
            s0 = peg$c25;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e28); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c22) {
              s0 = peg$c22;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c26) {
                s0 = peg$c26;
                peg$currPos += 7;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e29); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c49) {
                  s0 = peg$c49;
                  peg$currPos += 5;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e56); }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    return s0;
  }

  function peg$parseChargeName() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 5) === peg$c50) {
      s0 = peg$c50;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c51) {
        s0 = peg$c51;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c52) {
          s0 = peg$c52;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e60); }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

    return s0;
  }

  function peg$parseVaried() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseVariedName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c53) {
        s3 = peg$c53;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePlural();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f34(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseVariedName();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f35(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }

    return s0;
  }

  function peg$parseVariedName() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 11) === peg$c54) {
      s0 = peg$c54;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c55) {
        s0 = peg$c55;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c56) {
          s0 = peg$c56;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c57) {
            s0 = peg$c57;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e67); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c58) {
              s1 = peg$c58;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e68); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f36();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c59) {
                s0 = peg$c59;
                peg$currPos += 9;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e69); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c60) {
                  s0 = peg$c60;
                  peg$currPos += 7;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e70); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c61) {
                    s0 = peg$c61;
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e71); }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e73); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e72); }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

  root.parser = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})(this);
