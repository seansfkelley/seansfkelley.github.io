// Note: nothing is case insensitive here because it is assumed to only parse lowercase input.

Enter
  = content:ComplexContent "."? { return content }

ComplexContent
  = SimpleField
  / PartyPerField
  / Quarterly

SimpleField
  = tincture:Tincture _ content:SimpleContent? _ { return { tincture, content } }

PartyPerField
  = "party"? _ "per" _ direction:Direction _ first:Tincture _ "and" _ second:Tincture _ content:SimpleContent? { return { direction, first, second, content } }

Quarterly
  = "quarterly" _ quarters:Quarter+ { return { quarters } }

SimpleContent
  = Ordinary
  / Charge
  / "on" _ ordinary:Ordinary _ charge:Charge { return { on: true, ordinary, charge } }
  / "on" _ ordinary:Ordinary _ "between" _ surround:PluralCharge _ charge:Charge { return { on: true, ordinary, surround, charge } }

Quarter
  // TODO: Make this an actual list rule?
  = quarter:QuarterName _ content:ComplexContent { return { quarters: [quarter], content } }
  / quarter1:QuarterName _ "and"? _ quarter2:QuarterName _ content:ComplexContent { return { quarters: [quarter1, quarter2], content  } }
  / quarter1:QuarterName _ quarter2:QuarterName _ "and"? _ quarter3:QuarterName _ content:ComplexContent { return { quarters: [quarter1, quarter2, quarter3], content  } }
  / quarter1:QuarterName _ quarter2:QuarterName _ quarter3:QuarterName _ "and"? _ quarter4:QuarterName _ content:ComplexContent { return { quarters: [quarter1, quarter2, quarter3, quarter4], content  } }

Ordinary
  = Singular _ ordinary:OrdinaryName _ tincture:Tincture { return { ordinary, tincture } }

Charge
  = SingularCharge
  / PluralCharge

SingularCharge
  = Singular _ charge:ChargeName _ posture:Posture? _ tincture:Tincture { return { charge, tincture, posture, count: 1 } }

PluralCharge
  = count:Plural _ charge:ChargeName "s" _ posture:Posture? _ tincture:Tincture _ direction:InDirection? { return { charge, tincture, posture, count, direction } }

Singular "a/an"
  = "a"
  / "an"

Plural "plural quantity"
  = "two" { return 2 }
  / "three" { return 3 }
  / "four" { return 4 }
  // / "five" { return 5 }
  // / "six" { return 6 }

// TODO: bend, etc.
Direction
  = "pale"
  / "fess"

InDirection
  = "in" _ direction:Direction { return direction }

QuarterName "quarter name"
  = "first" { return 1 }
  / "1st" { return 1 }
  / "second" { return 2 }
  / "2nd" { return 2 }
  / "third" { return 3 }
  / "3rd" { return 3 }
  / "fourth" { return 4 }
  / "4th" { return 4 }

Posture
  = "palewise"
  / "fesswise"

Tincture "tincture"
  = "azure"
  / "or"
  / "argent"
  / "gules"
  / "vert"
  / "sable"
  / "purpure"
  / "counterchanged"

OrdinaryName "ordinary name"
  = "bend"
  / "fess"
  / "cross"
  / "chevron"
  / "pale"
  / "saltire"
  / "chief"

ChargeName "charge name"
  = "sword"
  / "rondel"
  / "mullet"

_ "whitespace"
  // Note that comma and semicolon are considered, effectively, whitespace. It is not used to delimit anything that is not already delimited by whitespace.
  = [,; \t\n\r]*
