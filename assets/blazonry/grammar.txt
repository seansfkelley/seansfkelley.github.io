// Note: nothing is case insensitive here because it is assumed to only parse lowercase input.

Enter
  = content:ComplexContent _ "."? { return content }

ComplexContent
  = SimpleField
  / PartyPerField
  / Quarterly

SimpleField
  = tincture:Tincture _ content:SimpleContent? { return { tincture, content } }
  / varied:Varied _ first:Tincture _ "and" _ second:Tincture _ content:SimpleContent? { return { varied, first, second, content } }

PartyPerField
  = Party? _ "per" _ direction:Direction _ first:Tincture _ "and" _ second:Tincture _ content:SimpleContent? { return { direction, first, second, content } }

Party
  = "party"
  / "parted"

Quarterly
  = "quarterly" _ quarters:Quarter+ { return { quarters } }

SimpleContent
  // Canton is a special case -- it's an ordinary so it can be placed by itself or with something on
  // it, but unlike other ordinaries it is allowed to have ordinaries on it. This makes it like a
  // party-per, but those can't be ordinaries. This explicit case was the least invasive change.
  // Maybe in the future I'll find more things and like this and call them MetaOrdinaries.
  //
  // TODO: Cantons can have ordinaries with "on". So maybe recursion is in order.
  = "a" _ "canton" tincture:Tincture { return { canton: tincture } }
  / "on" _ "a" _ "canton" _ tincture:Tincture _ charge:SingularCharge { return { canton: tincture, charge } }
  / "on" _ "a" _ "canton" _ tincture:Tincture _ ordinary:Ordinary { return { canton: tincture, ordinary } }
  // Order matters here since both the next rules start with an Ordinary.
  / ordinary:Ordinary _ "between" _ surround:PluralCharge { return { on: true, ordinary, surround } }
  / Ordinary
  / Charge
  / "on" _ ordinary:Ordinary _ charge:Charge { return { on: true, ordinary, charge } }
  / "on" _ ordinary:Ordinary _ "between" _ surround:PluralCharge _ charge:Charge { return { on: true, ordinary, surround, charge } }

Quarter
  // TODO: Make this an actual list rule?
  = quarter:QuarterName _ content:ComplexContent { return { quarters: [quarter], content } }
  / quarter1:QuarterName _ "and" _ quarter2:QuarterName _ content:ComplexContent { return { quarters: [quarter1, quarter2], content  } }
  / quarter1:QuarterName _ quarter2:QuarterName _ "and" _ quarter3:QuarterName _ content:ComplexContent { return { quarters: [quarter1, quarter2, quarter3], content  } }
  / quarter1:QuarterName _ quarter2:QuarterName _ quarter3:QuarterName _ "and" _ quarter4:QuarterName _ content:ComplexContent { return { quarters: [quarter1, quarter2, quarter3, quarter4], content  } }

Ordinary
  = Singular _ ordinary:OrdinaryName _ tincture1:Tincture? _ "cotised" _ tincture2:Tincture { return { ordinary, tincture: tincture1 ?? tincture2, cotised: tincture2 } }
  / Singular _ ordinary:OrdinaryName _ tincture:Tincture { return { ordinary, tincture } }

Charge
  = SingularCharge
  / PluralCharge

SingularCharge
  = Singular _ charge:ChargeName _ posture:Posture? _ tincture:Tincture { return { charge, tincture, posture, count: 1 } }

PluralCharge
  = count:Plural _ charge:ChargeName "s" _ posture:Posture? _ tincture:Tincture _ direction:InDirection? { return { charge, tincture, posture, count, direction } }

Singular "a/an"
  = "a"
  / "an"

Plural "plural quantity"
  = "two" { return 2 }
  / "three" { return 3 }
  / "four" { return 4 }
  / "five" { return 5 }
  / "six" { return 6 }
  / "seven" { return 7 }
  / "eight" { return 8 }
  / "nine" { return 9 }
  / "ten" { return 10 }
  / "eleven" { return 11 }
  / "twelve" { return 12 }

Direction "direction"
  = "pale"
  / "fess"
  / "bend"
  / "chevron"
  / "saltire"

InDirection "direction"
  = "in" _ direction:Direction { return direction }
  // Special case: things can be "in cross" but they can't be "party per cross".
  / "in" _ "cross" { return "cross" }

QuarterName "quarter name"
  = "first" { return 1 }
  / "1st" { return 1 }
  / "second" { return 2 }
  / "2nd" { return 2 }
  / "third" { return 3 }
  / "3rd" { return 3 }
  / "fourth" { return 4 }
  / "4th" { return 4 }

Posture "posture"
  = "palewise"
  / "fesswise"
  / "bendwise"
  / "saltirewise"

Tincture "tincture"
  = "azure"
  / "or"
  / "argent"
  / "gules"
  / "vert"
  / "sable"
  / "purpure"
  / "counterchanged"

OrdinaryName "ordinary name"
  = "bend"
  / "fess"
  / "cross"
  / "chevron"
  / "pale"
  / "saltire"
  / "chief"

ChargeName "charge name"
  = "sword"
  / "rondel"
  / "mullet"

Varied "varied"
  = type:VariedName _ "of" _ count:Plural { return { type, count } }
  / type:VariedName { return { type } }

VariedName "varied name"
  = "barry bendy"
  / "barry"
  / "bendy"
  / "checky"
  / "chequey" { return "checky" }
  / "chevronny"
  / "lozengy"
  / "paly"

_ "whitespace"
  // Note that comma and semicolon are considered, effectively, whitespace. It is not used to delimit anything that is not already delimited by whitespace.
  = [,; \t\n\r]*
