---
# why do I have to put this nonsense header in and break my syntax highlighter
---

@import "variables";

$colors: (
  argent: whitesmoke,
  sable: black,
  gules: crimson,
  vert: green,
  azure: mediumblue,
  or: gold,
  purpure: blueviolet,
  cendree: grey,
);

.hidden {
  display: none !important;
}

#random-blazon {
  // colors from https://stackoverflow.com/questions/56418763/creating-the-perfect-rainbow-gradient-in-css
  background: linear-gradient(
    90deg,
    rgba(255, 0, 0, 1) 0%,
    rgba(255, 154, 0, 1) 5%,
    rgba(208, 222, 33, 1) 10%,
    rgba(79, 220, 74, 1) 15%,
    rgba(63, 218, 216, 1) 20%,
    rgba(47, 201, 226, 1) 25%,
    rgba(28, 127, 238, 1) 30%,
    rgba(95, 21, 242, 1) 35%,
    rgba(186, 12, 248, 1) 40%,
    rgba(251, 7, 217, 1) 45%,
    rgba(255, 0, 0, 1) 50%,
    rgba(255, 154, 0, 1) 55%,
    rgba(208, 222, 33, 1) 60%,
    rgba(79, 220, 74, 1) 65%,
    rgba(63, 218, 216, 1) 70%,
    rgba(47, 201, 226, 1) 75%,
    rgba(28, 127, 238, 1) 80%,
    rgba(95, 21, 242, 1) 85%,
    rgba(186, 12, 248, 1) 90%,
    rgba(251, 7, 217, 1) 95%,
    rgba(255, 0, 0, 1) 100%
  );
  background-clip: text;
  color: transparent;
  animation: rainbow-animation 8s linear infinite;
  background-size: 800% 100%;
  appearance: none;
  padding: $spacing / 4 $spacing;
  margin: 0;
  border: 1px solid var(--input-border-color);
  border-radius: $input-border-radius;
}

@keyframes rainbow-animation {
  // TODO: Do some algebra to figure out what these two figures should actually be.
  0% {
    background-position-x: 21%;
  }

  100% {
    background-position-x: 79%;
  }
}

a[data-example]:not(:hover) {
  color: darkcyan;
}

@each $key, $val in $colors {
  .fill-#{"" + $key} {
    fill: $val;
  }

  .stroke-#{"" + $key} {
    stroke: $val;
  }
}

.fill-none {
  fill: none;
}

.stroke-none {
  stroke: none;
}

#form,
#error,
#rendered,
#ast {
  margin-top: 12px;
}

#rendered {
  width: 300px;
  height: 360px;
}

#rendered,
#rendered-preview-container svg {
  fill: none;
}

#error {
  margin-bottom: 0;
  width: 100%;
  box-sizing: border-box;
  background-color: var(--intent-danger-background-color);
  color: var(--intent-danger-text-color);
  white-space: pre;
  overflow-x: auto;
}

#ast-wrapper {
  width: 100%;
  box-sizing: border-box;
  margin-top: 6px;
  margin-bottom: 12px;
}

#form {
  width: 100%;

  #blazon-input {
    width: 100%;
    box-sizing: border-box;
    font-size: 1em;
    font-family: inherit;
    resize: vertical;
  }

  > div {
    width: 100%;
    margin-top: 6px;
    display: flex;
    justify-content: space-between;

    button {
      margin: 0;
    }
  }
}

#ambiguous {
  width: 100%;
  margin-top: 6px;

  display: flex;
  justify-content: center;
  align-items: center;

  > * {
    margin: 0 3px;
  }

  #ambiguous-count {
    white-space: nowrap;
  }
}

#rendered-preview-container {
  opacity: 0;
  transition: opacity 300ms;
  position: fixed;
  right: var(--post-inset);
  bottom: var(--post-inset);
  filter: drop-shadow(0 0 4px var(--text-color-faded));
  pointer-events: none;

  &.visible {
    opacity: 1;
    pointer-events: initial;
  }

  svg {
    width: 100px;
    height: 120px;
  }

  @media screen and (min-width: $width-mobile) {
    right: inherit;
    left: calc(50% - 225px + var(--post-width) / 2);

    svg {
      width: 150px;
      height: 180px;
    }
  }
}

.center {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.lion {
  stroke-width: 1 !important;

  .outline {
    stroke: black;
  }

  .teeth,
  .white {
    // white, as in, whites of the eyes
    fill: white;
  }

  .ear,
  .pupil,
  .medial-sulcus {
    fill: black;
  }

  @each $key, $val in $colors {
    &.#{"" + $key} {
      fill: none;

      .body,
      .claw,
      .langue {
        fill: $val;
      }
    }

    &.armed-#{"" + $key} .claw {
      // Fucking CSS specificity rules. I DON'T HAVE ANY MORE CLASSES TO INCREASE SPECIFICITY WITH.
      // JUST LET ME MAKE THIS RULE TAKE PRECEDENCE.
      fill: $val !important;
    }

    &.langued-#{"" + $key} .langue {
      fill: $val !important;
    }
  }
}

.escallop {
  .outline {
    stroke: black;
    stroke-opacity: 0.3;
    stroke-width: 2;
  }

  @each $key, $val in $colors {
    &.#{"" + $key} {
      fill: none;

      .light {
        fill: $val;
      }

      .dark {
        fill: darken($val, 10%);
      }
    }
  }
}

.fleur-de-lys {
  .outline {
    stroke: black;
    stroke-opacity: 0.3;
    stroke-width: 2;
  }

  @each $key, $val in $colors {
    &.#{"" + $key} {
      fill: none;

      .main {
        fill: $val;
      }

      .lowlight {
        fill: darken($val, 5%);
      }

      .highlight {
        fill: lighten($val, 15%);
      }
    }
  }
}
